<Project>

  <PropertyGroup>
    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>
    <SourceRoot>$(RepositoryRoot)src\</SourceRoot>
  </PropertyGroup>

  <PropertyGroup>
    <RootNamespace>Abc</RootNamespace>
    <IsPackable>false</IsPackable>

    <LangVersion>latest</LangVersion>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <Nullable>enable</Nullable>

    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)Abc.snk</AssemblyOriginatorKeyFile>

    <!-- Fake version -->
    <VersionPrefix>1.0.0</VersionPrefix>
    <VersionSuffix>DUMMY</VersionSuffix>
  </PropertyGroup>

  <!-- Warnings & errors -->
  <Choose>
    <When Condition=" $(Configuration) == 'Debug' ">
      <PropertyGroup>
        <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
        <TreatSpecificWarningsAsErrors />
      </PropertyGroup>
    </When>

    <Otherwise>
      <PropertyGroup>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Assembly info & Package metadata -->
  <PropertyGroup>
    <Authors>Chtoucas</Authors>
    <Company>Narvalo.Org</Company>
    <Product>Abécédaire Library</Product>
    <Copyright>Copyright (c) 2019 Narvalo.Org</Copyright>

    <PackageProjectUrl>https://github.com/chtoucas/Abc.Maybe/</PackageProjectUrl>
    <PackageLicenseExpression>BSD-3-Clause</PackageLicenseExpression>
    <PackageReleaseNotes>See CHANGELOG in project root.</PackageReleaseNotes>

    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/chtoucas/Abc.Maybe/</RepositoryUrl>
  </PropertyGroup>

  <!-- Supported platforms -->
  <PropertyGroup>
    <!--
      IMPORTANT: do NOT use MSBuild property resolution $() when a property is
      going to be parsed by a PowerShell script, which means everything except
      the first group of properties.

      For libraries, use
        <TargetFrameworks>$(LibraryPlatforms)</TargetFrameworks>
      otherwise use
        <TargetFrameworks>$(MaxPlatform)</TargetFrameworks>
      Do not use "TargetFramework" (no "s"), otherwise testing multi-targets
      at once won't work. Another benefit is that "TargetFramework" won't be
      empty when importing in D.B.props (important for what we do at the end
      of this file).

      Remarks:
      - If/when we create an API depending on a new .NET Standard, "MaxPlatform"
        should be the last available platform supporting it. We can also update
        "MaxPlatform" just to benefit from the last improvements it could bring.
      - The first listed framework in "LibraryPlatforms" is the one used by the
        VS editor. Full NRT-analysis requires .NET Core 3.0 or above, .NET Standard
        does not include the nullable annotations (version 2.1 defines the nullable
        attributes but VS doesn't use them if I understand things correctly).
        We use the version 3.1 instead of 3.0 because the former is LTS and the
        latter is already EOL.
      - Platforms grouped by dotnet tasks.
        Do NOT add .NET Standard 1.0, v1.1 has everything we need but with
        a much simpler dependency graph.
        https://dotnet.microsoft.com/platform/dotnet-standard#versions
        https://github.com/dotnet/standard/blob/master/docs/versions.md
      - .NET Framework (Classic).
        "MinClassicPlatforms" lists the last minor version of each major version.
        "MaxClassicPlatforms" must contain "MinClassicPlatforms".
        https://support.microsoft.com/en-us/help/17455/lifecycle-faq-net-framework
      - .NET Core.
        "MinCorePlatforms" lists the LTS versions and the latest one if not LTS.
        "MaxCorePlatforms" must contain "MinCorePlatforms".
        https://dotnet.microsoft.com/platform/support/policy/dotnet-core
        https://github.com/dotnet/core/blob/master/microsoft-support.md
    -->
    <MaxPlatform>netcoreapp3.1</MaxPlatform>
    <LibraryPlatforms>$(MaxPlatform);netstandard2.0</LibraryPlatforms>

    <BuildPlatforms>netstandard2.1;netstandard1.1;netcoreapp3.1;netcoreapp2.0;net48;net45</BuildPlatforms>
    <TestPlatforms>netcoreapp3.1;netcoreapp2.0;net48;net452</TestPlatforms>
    <PackPlatforms>netstandard2.1;netstandard2.0;net461;net452</PackPlatforms>

    <MinClassicPlatforms>net48;net472;net462;net452</MinClassicPlatforms>
    <MaxClassicPlatforms>net48;net472;net471;net47;net462;net461;net46;net452</MaxClassicPlatforms>
    <MinCorePlatforms>netcoreapp3.1;netcoreapp2.1</MinCorePlatforms>
    <MaxCorePlatforms>netcoreapp3.1;netcoreapp3.0;netcoreapp2.2;netcoreapp2.1;netcoreapp2.0</MaxCorePlatforms>
  </PropertyGroup>

  <!--
    What follows only works if we use "TargetFrameworks" in MSBuild projects.
    It should not be in D.B.props, but I don't see how to do it without
    repeating myself.
  -->

  <!-- API profiles -->
  <PropertyGroup>
    <!--
      See "BuildPlatforms" and "PackPlatforms" above.
      Profile 2.1: "netstandard2.1" and "netcoreapp3.1" ie "MaxPlatform".
      Profile 2.0 (default): everything else.

      We use "ApiProfileMoniker" both in "src\Abc.Maybe" and in D.B.targets.
    -->
    <ApiProfileMoniker>netstandard2.0</ApiProfileMoniker>
  </PropertyGroup>
  <PropertyGroup Condition=" $(TargetFramework) != '' ">
    <ApiProfileMoniker Condition=" $(TargetFramework) == 'netstandard2.1' ">netstandard2.1</ApiProfileMoniker>
    <ApiProfileMoniker Condition=" $(TargetFramework) == $(MaxPlatform) ">netstandard2.1</ApiProfileMoniker>
  </PropertyGroup>

  <!--
    Microsoft.Bcl.HashCode does not support .NET Framework <= 4.6

    We use "AddHashCodePackage" both in "src\Abc.Tests" and in "test\Abc.PackageTests".
  -->
  <PropertyGroup>
    <AddHashCodePackage>true</AddHashCodePackage>
  </PropertyGroup>
  <PropertyGroup Condition=" $(TargetFramework) != '' ">
    <AddHashCodePackage Condition=" $(TargetFramework.StartsWith('net45')) ">false</AddHashCodePackage>
    <AddHashCodePackage Condition=" $(TargetFramework) == 'net46' ">false</AddHashCodePackage>
    <AddHashCodePackage Condition=" $(TargetFramework.StartsWith('netstandard1.')) ">false</AddHashCodePackage>
  </PropertyGroup>

</Project>
