TODO
====

Code
----

- Add overloads w/ IEqualityComparer<T> (true structural comparison).
- LINQ: optimize, more. "Monadic" LINQ. Output Maybe<IEnumerable<T>> and LINQ ops.
- Async Enumerable.
- Serialization (XML).
- Localise user messages (ExceptionFactory)?
- FIXME, TODO and REVIEW within the code.

Tools
-----

- MSBuild "RestoreSources" in "test".
  https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#restore-target
- Scripts
  * Add option -Verbosity?
  * Add option -MyVerbose to test-package.ps1.
  * Verbosity tweak for "dotnet test": -v minimal /p:PrintSettings=true
    does nothing with a test project. When resolved, update AZP.
- EnableSourceLink no longer prevents coverlet to run, but it fails when we set
  UseSourceLink=true (see cover.ps1 & coverlet.runsettings). All paths are still
  local too.
- Roslyn Analyzer:
  * Of(), Flatten(). Squash(Maybe<T?>) where T : class
  * SelectMany(), ZipWith(), Bind().
- Perf tool (LINQ, nulls, iterable), .NET Core tool for benchmarkdotnet.

Testing
-------

Testing is well underway but there is still a lot to be done.
Fixed naming schema, split tests, more functional tests.

- MaybeComparer<T>, proper testing of equality and ordering comparisons.
  Expand comparison tests (order and equality). See NONGENERIC_MAYBE
  Structural comparisons w/ structural types.
  https://stackoverflow.com/questions/4968580/why-arent-istructuralequatable-and-istructuralcomparable-generic
- Maybe<Func<>>
- delegates that return null.

Documentation
-------------

XML comments with complete examples.
Help: https://github.com/dotnet/dotnet-api-docs/wiki
When done, configure Abc.Maybe to warn on missing XML comments.

Sample code w/ C#, VB and F#.

A bit of marketing, compare to other option types.

"Lifted" comparison T w/ Maybe<T> to handle mixed type, eg Maybe<int?>,
Maybe<int>, int? and int. See custom MaybeComparer<T>. Do not implement
IEquatable<T> (T == Maybe<T>), IComparable<T> this would be misleading?

Struct really? Explain and compare to ValueTuple.
- https://docs.microsoft.com/en-gb/dotnet/csharp/tuples
- http://mustoverride.com/tuples_structs/
- https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines
- https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/value-options
- https://github.com/fsharp/fslang-design/blob/master/FSharp.Core-4.5.0.0/FS-1057-valueoption.md

Nullable attributes and notnull constraint.
It would make a lot of sense to add a notnull constraint on the T of Maybe<T>,
but it worries me a bit (I need to gain more experience with the new NRT). It
would allow to warn a user trying to create a Maybe<int?> or a Maybe<string?>.
- https://docs.microsoft.com/en-us/dotnet/csharp/nullable-attributes
- https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/
- https://devblogs.microsoft.com/dotnet/nullable-reference-types-in-csharp/
- https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/

CI
--

For test/exe projects, we should use MaxPlatform + "netcoreapp2.1" but it
cannot work on AZP because we are stucked with a single .NET Core version.

GitHub actions: use global.json (next version of "actions/setup-dotnet").

NuGet caching (AZP)?
<PropertyGroup Condition=" $(ContinuousIntegrationBuild) == 'true' ">
  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
  <RestoreLockedMode>true</RestoreLockedMode>
  <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
  <!--<NoWarn>NU1603</NoWarn>-->
</PropertyGroup>
