TODO
====

CLOW:
- test.ps1 fails when targetting 'netcoreapp2.0'.
  It restores the wrong xunit.runner.visualstudio???? (see NU1701)
  Removing "Microsoft.NET.Test.Sdk" fixed this, but it no longer does.
- cover.ps1 add option -MyVerbose (-v minimal /p:PrintSettings=true)
  AZP too. Why does it not display anything with Abc.Tests?
- Add quotes in MSBuild, not necessary...
- EnableSourceLink no longer prevents coverlet to run, but it fails when we set
  UseSourceLink=true (see cover.ps1 & coverlet.runsettings).

Code
----

- Add overloads w/ IEqualityComparer<T> (true structural comparison).
- LINQ: optimize, more ops.
  "Monadic" LINQ. Output Maybe<IEnumerable<T>> and LINQ ops.
- Async Enumerable.
- Utilities to write code in the ROP style (Railway Oriented Programming).
- Serialization (XML)
-  Misc.
  * FIXME, TODO and REVIEW within the code.
  * Localise user messages (ExceptionFactory)?

Tools
-----

- Use MSBuild prop "RestoreSources"?
- Roslyn Analyzer:
  * Of(), Flatten(). Squash(Maybe<T?>) where T : class
  * SelectMany(), ZipWith(), Bind().
- Perf tool (LINQ, nulls, iterable), .NET Core tool for benchmarkdotnet.
- Instead of coverlet.msbuild, use coverlet.collector?
  Currently it cannot work since we only reference "Microsoft.NET.Test.Sdk"
  when running VS. Furthermore, coverlet.msbuild simplifies

Testing
-------

Testing is well underway but there is still a lot to be done.
Fixed naming schema, split tests, more functional tests.

- MaybeComparer<T>, proper testing of equality and ordering comparisons.
  Expand comparison tests (order and equality). See NONGENERIC_MAYBE
  Structural comparisons w/ structural types.
  https://stackoverflow.com/questions/4968580/why-arent-istructuralequatable-and-istructuralcomparable-generic
- Maybe<Func<>>
- delegates that return null.

Documentation
-------------

XML comments with complete examples.
Help: https://github.com/dotnet/dotnet-api-docs/wiki
When done, configure Abc.Maybe to wanr on missing XML comments.

Sample code w/ C#, VB and F#.

A bit of marketing, compare to other option types.

"Lifted" comparison T w/ Maybe<T> to handle mixed type, eg Maybe<int?>,
Maybe<int>, int? and int. See custom MaybeComparer<T>. Do not implement
IEquatable<T> (T == Maybe<T>), IComparable<T> this would be misleading?

Struct really? Explain and compare to ValueTuple.
- https://docs.microsoft.com/en-gb/dotnet/csharp/tuples
- http://mustoverride.com/tuples_structs/
- https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines
- https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/value-options
- https://github.com/fsharp/fslang-design/blob/master/FSharp.Core-4.5.0.0/FS-1057-valueoption.md

Nullable attributes and notnull constraint.
It would make a lot of sense to add a notnull constraint on the T of Maybe<T>,
but it worries me a bit (I need to gain more experience with the new NRT). It
would allow to warn a user trying to create a Maybe<int?> or a Maybe<string?>.
- https://docs.microsoft.com/en-us/dotnet/csharp/nullable-attributes
- https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/
- https://devblogs.microsoft.com/dotnet/nullable-reference-types-in-csharp/
- https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/

Azure pipelines
---------------

Include instead of Exclude? Artifacts retention?

NuGet caching.
<PropertyGroup Condition=" $(ContinuousIntegrationBuild) == 'true' ">
  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
  <RestoreLockedMode>true</RestoreLockedMode>
  <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
  <!--<NoWarn>NU1603</NoWarn>-->
</PropertyGroup>

Release pipeline, test all supported platforms.

Linux job?
https://xunit.net/docs/getting-started/multi-target/non-windows

References
- https://github.com/actions/virtual-environments
- https://github.com/microsoft/azure-pipelines-yaml/blob/master/templates/.net-desktop.yml
- https://docs.microsoft.com/en-gb/azure/devops/pipelines/apps/windows/dot-net?view=azure-devops&tabs=github
