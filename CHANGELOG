Changelog for Abc.

vNEXT
-----

Added
- Maybe<T> is now serializable.

Removed
- Maybe.Of() with a struct constraint.
- Maybe.Flatten() with a struct constraint.

2020-04-16, version 1.0.0-beta1
-------------------------------

Added
- New versions of Maybe.Squash()
    static Maybe.Squash<T>(this Maybe<T>) where T : class
    static Maybe.Squash<T>(this Maybe<Maybe<T>>) where T : class
    static Maybe.Squash<T>(this in Maybe<Maybe<T?>>) where T : struct
  to complement the existing one
    static Maybe.Squash<T>(this in Maybe<T?>) where T : struct

Changed
- [OBSOLETE] Maybe.Flatten() with a struct constraint; use Maybe.Squash().
- Remove the in parameter modifier used by the Maybe.Flatten() with no generic
  type constraint.
- LINQ ElementAtOrNone() no longer returns an empty maybe if the index is out of
  range but rather throws an ArgumentOutOfRangeException.

Removed
- Maybe<T>.Skip(); use Maybe<T>.IsNone with Maybe.Unit or Maybe.Zero.

Internal Changes
- New script eng\freeze-api.ps1.
- New option to hard clean the solution before packing.
- Upgraded packages:
  * ReportGenerator 4.5.5 -> 4.5.6.

2020-04-12, version 1.0.0-alpha3
--------------------------------

Changed
- [BREAKING] MaybeComparer<T>, complete rewrite, optionally structural.
- Apply attribute EditorBrowsable to methods reserved for advanced scenarios.
- Strong-name the public assembly.
- Embed the debug symbols.

Internal Changes
- New perf project.
- Rewrite most scripts using PowerShell.
- Better build system.
- Upgraded packages:
  * BenchmarkDotNet 0.12.0 -> 0.12.1.
  * ReportGenerator 4.5.3 -> 4.5.5.

2020-04-03, version 1.0.0-alpha-2
---------------------------------

Added
- The NuGet package now includes the pdb.

Changed
- [BREAKING] Maybe<T>.OrElseAsync() now expects a factory rather than a task.
- [BREAKING] Maybe.Compose() and Maybe.ComposeBack() now return a "maybe" rather
  than an anonymous function.
- Async methods now use eager validation.

Removed
- Maybe<T>.GroupJoin(); use Maybe<T>.SelectMany() instead.
- Maybe<T>.SwitchAsync(); use Maybe<T>.Switch() instead.
- Qperators.ZipAny(); use LINQ Zip followed by Maybe.CollectAny().

Internal Changes
- Full test coverage.
- Replaced OpenCover by Coverlet as the default tool for test coverage.
- New project Narvalo.Future for experimental code.
- Cleaned up project files.
  * No longer define compiler symbols NETSTANDARD2_0 and NETSTANDARD2_1 as
    this is already done by MSBuild.
    See https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries
  * Use .editorconfig instead of MSBuild to configure language conventions
    inside the editor (warnings IDEnnnn).

2020-03-27, version 1.0.0-alpha-1
---------------------------------

First alpha release.

2017-04-07, version 0.28.0
--------------------------

Still available on nuget.org but under a different name
(https://www.nuget.org/packages/Narvalo.Fx/) now deprecated.
