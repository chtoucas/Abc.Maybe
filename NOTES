Developer Notes.

vNEXT
-----

Version 1.0.0-alpha-3
- Add overloads w/ IEqualityComparer<T>? Maybe<T> == T?
- Finish MaybeComparer<T>.
- Testing is well underway but there is still a lot to be done.

Version 1.0.0-beta1
- Stable API.
- FIXMEs and TODOs.
- More functional tests.

Towards version 1.0.0
- README: some pub, compare to other option types.
- Infra
  * Use Directory.Build.props and Directory.Build.targets
    Move lib projects to src w/ custom props?
  * Move to coverlet-console? runsettings.
  * Versioning (MSBuild tool), NetStandardImplicitPackageVersion
    https://docs.microsoft.com/en-us/dotnet/core/packages
  * Strong name? How to avoid binding redirects? Prerequesite: assembly version.
    MUST be done before the final release.
    https://github.com/dotnet/runtime/blob/master/docs/project/strong-name-signing.md
    https://docs.microsoft.com/en-gb/dotnet/standard/library-guidance/strong-naming
  * NuGet package:
    - Test published packages.
    - SourceLink?
      https://github.com/NuGet/Home/issues/4142
    - Improve package info: description & co.
      Deterministic, ContinuousIntegrationBuild, Title, AssemblyTitle,
      VersionPrefix, PackageLicenseFile.
      https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets
      https://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html

Version 2
- LINQ: optimize, more ops.
- "monadic" LINQ. Output Maybe<IEnumerable<T>> and LINQ ops.

Version ???
- ROP.
- Extensions.
- Async (configurable, enumerable).

TODOs
-----

See FIXME, TODO and REVIEW within the code.
- code formatter w/ CopyrightHeader.txt
- Multitargeting.
  * Tests.
  * .NET Standard 2.1 & .NET Core 3.1 only:
    - More May helpers w/ Span<T>.
    - Use System.HashCode
- API.
  * BannedApiAnalyzers
  * How to handle PublicAPI.XXX.txt?
    https://github.com/dotnet/roslyn-analyzers/blob/master/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md

Async:
- Microsoft.Bcl.AsyncInterfaces
- Async enumerables.
- References
  https://markheath.net/post/async-antipatterns
  https://github.com/StephenCleary/AsyncEx
  https://stackoverflow.com/questions/19098143/what-is-the-purpose-of-return-await-in-c
  https://blog.stephencleary.com/2016/12/eliding-async-await.html
  https://stackoverflow.com/questions/18656379/validate-parameters-in-async-method
  https://codeblog.jonskeet.uk/2010/11/01/control-flow-redux-exceptions-in-asynchronous-code/
  https://devblogs.microsoft.com/dotnet/configureawait-faq/
  https://ericlippert.com/2020/03/10/passing-awaited-tasks/
  https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/november/async-programming-unit-testing-asynchronous-code

Operations:
- XML comments with complete examples.
  https://github.com/dotnet/dotnet-api-docs/wiki
- Perf tool (LINQ, nulls, iterable).
- Coverity
- Cleanup scripts, eg: dotnet nuget locals --clear all.
- dotnet-outdated

Local tools
  Initialize
    dotnet new tool-manifest
  Install
    dotnet tool install dotnet-reportgenerator-globaltool
  List
    dotnet tool list
  Find updates
    ???
  Update
    dotnet tool update
  Restore
    dotnet tool restore
https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools

Release Process
---------------

Version

API, update the files PublicAPI.Shipped.txt & PublicAPI.Unshipped.txt.
Obsolete member: move from Shipped to Unshipped and prefix w/ *REMOVED*.

Guidelines
----------

- Methods that return something should have the attribure Pure. It is not
  mandatory but it clearly states that the result should not be ignored.
  It might seem superfluous, but "Ã§a ne mange pas de pain".
- Add _nullable annotations_ whenever necessary.
- _Seal classes_ unless they are designed with extensibility in mind.
- Tag any use of the null-forgiving operator (!) with BONSANG!.

Editor config (does not affect the compilation).
- IDE0039 - csharp_style_pattern_local_over_anonymous_function
- IDE0060 - dotnet_code_quality_unused_parameters, (Remove unused parameter) covered by CA1801.
https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019
