Developer Notes.

vNEXT
-----

Version 1.0.0-alpha4
Comparisons.
- "Lifted" comparison T w/ Maybe<T>? see also MaybeComparer<T>.
  IEquatable<T> (T == Maybe<T>), IComparable<T> but a bit missleading?
- Add overloads w/ IEqualityComparer<T>?
- Finish MaybeComparer<T>.
  Split equality and order?

Version 1.0.0-beta1
Stable API.
- No more FIXMEs or TODOs.
- Nullable attributes and notnull constraint.
  It would make a lot of sense to add a notnull constraint on the T of Maybe<T>,
  but it worries me a bit (I need to gain more experience with the new NRT). It
  would allow to warn a user trying to create a Maybe<int?> or a Maybe<string?>.
  Maybe I managed to entirely avoid it, but I am not sure at all.
  https://docs.microsoft.com/en-us/dotnet/csharp/nullable-attributes
  https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/
  https://devblogs.microsoft.com/dotnet/nullable-reference-types-in-csharp/
  https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/

Towards version 1.0.0
- Testing is well underway but there is still a lot to be done.
  We need more functional tests.
- Check published packages (upgrade, debugging experience). See repos Abc.
- README: a bit of marketing, compare to other option types.
  Struct really? Explain and compare to ValueTuple.
  https://docs.microsoft.com/en-gb/dotnet/csharp/tuples
  http://mustoverride.com/tuples_structs/
  https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines
  https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/value-options
  https://github.com/fsharp/fslang-design/blob/master/FSharp.Core-4.5.0.0/FS-1057-valueoption.md
- https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets

Version ???
- More May helpers w/ Span<T>.
- LINQ: optimize, more ops.
  "Monadic" LINQ. Output Maybe<IEnumerable<T>> and LINQ ops.
- Utilities to write code in the ROP style (Railway Oriented Programming).
- Extensions.
- Async (configurable, enumerable).
- Analyzer for Of().

Tasks
-----

- FIXME, TODO and REVIEW within the code.
- XML comments with complete examples.
  https://github.com/dotnet/dotnet-api-docs/wiki
- Multitargeting:
  * Target net461? Review !NETSTANDARD2.0 in code.
    https://github.com/dotnet/announcements/issues/31
  * .NET Standard 2.1 & .NET Core 3.1 only. Use System.HashCode.
    Use PlatformNotSupportedException for things that could be supported but
    are not actually.
  * How to handle PublicAPI.XXX.txt?
    https://github.com/dotnet/roslyn-analyzers/blob/master/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md

Other tasks
- Perf tool (LINQ, nulls, iterable).
- BannedApiAnalyzers?
- Deterministic build? Disabled as it seems to conflict with the fact that we
  change the assembly file version and the description on every build.
- SourceLink? Right now, the answer is no as it requires that the customer changes
  a few VS settings. We use embbeded symbols as it seems to work all the time
  (apparently there are situations where a separate pdb can cause problems too);
  one drawback is the increased size of the dll (~8 Ko).
  If we do change our mind, remove AllowedOutputExtensionsInPackageBuildOutputFolder,
  no longer set InformationalVersion (generated by SourceLink?), add
  ContinuousIntegrationBuild.
  https://github.com/NuGet/Home/issues/4142
- Replace coverlet.msbuild by coverlet-console? Use runsettings.
  Add coverlet.collector to the test project. Coverity?
- Cleanup scripts, dotnet nuget locals --clear all.
- Local tools: find updates, dotnet-outdated.
  Remove refs to OpenCover and ReportGenerator in Abc.Tests.
  https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools

Versioning
----------

Format Major.Minor.Patch[-PreRelease]
- Major: Breaking changes -or- Major new features.
- Minor: Minor new features, but backwards compatible.
- Patch: Backwards compatible bug fixes only.
- PreRelease:
  DEV)   Internal, not for public consumption.
  alpha) Used for work-in-progress and experimentation.
  beta)  One that is feature complete for the next planned release, but may
         contain known bugs.
Regarding new features, we do not follow exactly semantic versioning;
see https://docs.microsoft.com/en-us/nuget/concepts/package-versioning

Under normal circumstances, we do NOT introduce breaking changes, in particular
we do NOT remove features (we mark them as obsolete).
If we have to, this can ONLY happen with a new MAJOR release (not minor), eg
1.3.4 to 2.0.0 is OK, but 1.3.4 to 1.4.0 is NOT.
Pre-releases are free to introduce new features and remove them after; it should
not happen with beta releases but we never know.

Changelog
---------

Sections.
- Added, for new features.
- Changed, for changes in existing functionality.
  Breaking changes MUST be prefixed w/ [BREAKING] and appeared first.
  New obsolete methods MUST be prefixed w/ [OBSOLETE] and appear just after.
- Removed, for now removed features. NB: any item appearing here obviously
  introduces a breaking change.
- Fixed, for any bug fixes.
- Security, in case of vulnerabilities.
- Internals, for internal changes that are of no interest outside the project.

Production releases should have a title and highlight the relevant changes made
during the pre-release phase.

Inspired by https://keepachangelog.com/en/1.0.0/

Release Process
---------------

Requirement: command-line git.

1. New version in eng\Abc.Maybe.props
2. Update CHANGELOG
3. Git commit
4. Run script eng\pack.ps1
5. Publish package

Post actions, only for production packages.
1. Run script eng\update-api.ps1
2. Git commit
3. Git tag

Development
-----------

Rules.
- Seal classes unless they are designed for extensibility.
- Add nullable annotations wherever necessary.
  Tag any use of the null-forgiving operator (!) with BONSANG!.
- Methods that return something should have the attribure Pure. It is not
  mandatory but it clearly states that the result should not be ignored.
  It might seem superfluous, but "Ã§a ne mange pas de pain".
- Good principles worth remembering: The Zen of Python.
  https://www.python.org/dev/peps/pep-0020/

Changes to the default editor config (does not affect the compilation).
- IDE0039 - csharp_style_pattern_local_over_anonymous_function
- IDE0060 - dotnet_code_quality_unused_parameters, (Remove unused parameter) covered by CA1801.
https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019

Local tools.
- qtest.cmd, quickly run the test suite.
- qperf.cmd, quickly run the perf tool.
- eng\cover.ps1, code coverage script (Coverlet or OpenCover).
- eng\pack.ps1, packing script.
- eng\update-api.ps1, update public API files.

Useful tools.
- NuGet Package Explorer
- ILDasm, ILSpy, dotPeek
