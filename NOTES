Developer Notes.

vNEXT
-----

Version 1.0.0-alpha3
- Add overloads w/ IEqualityComparer<T>? Maybe<T> == T?
- Finish MaybeComparer<T>.

Version 1.0.0-beta1
- Stable API.
- FIXMEs and TODOs.

Towards version 1.0.0
- README: a bit of marketing, compare to other option types.
- Testing is well underway but there is still a lot to be done.
  We need more functional tests.
- Check published packages (upgrade, debugging experience).
- https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets

Version ???
- More May helpers w/ Span<T>.
- LINQ: optimize, more ops.
  "Monadic" LINQ. Output Maybe<IEnumerable<T>> and LINQ ops.
- Utilities to write code in the ROP style (Railway Oriented Programming).
- Extensions.
- Async (configurable, enumerable).

TODOs
-----

See FIXME, TODO and REVIEW within the code.
- Multitargeting: .NET Standard 2.1 & .NET Core 3.1 only. Use System.HashCode.
  How to handle PublicAPI.XXX.txt?
  https://github.com/dotnet/roslyn-analyzers/blob/master/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md
- BannedApiAnalyzers?
- Deterministic build? Disabled as it seems to conflict with the fact that we
  change the assembly file version and the description on every build.
- SourceLink? Right now, the answer is no as it requires that the customer changes
  a few VS settings. We use embbeded symbols as it seems to work all the time
  (apparently there are situations where a separate pdb can cause problems too);
  one drawback is the increased size of the dll (~8 Ko).
  If we do change our mind, remove AllowedOutputExtensionsInPackageBuildOutputFolder,
  no longer set InformationalVersion (generated by SourceLink?), add
  ContinuousIntegrationBuild.
  https://github.com/NuGet/Home/issues/4142

Operations:
- XML comments with complete examples.
  https://github.com/dotnet/dotnet-api-docs/wiki
- Perf tool (LINQ, nulls, iterable).
- Replace coverlet.msbuild by to coverlet-console? runsettings.
  Add coverlet.collector to the test project. Coverity?
- Cleanup scripts, clean obj/bin, dotnet nuget locals --clear all.
- Local tools: find updates, dotnet-outdated.
  https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools

Release Process
---------------

1. Version (update Retail.props).

2. API, update the files PublicAPI.Shipped.txt & PublicAPI.Unshipped.txt.
   Obsolete member: move from Shipped to Unshipped and prefix w/ *REMOVED*.

3. Git Tag

Guidelines
----------

- Methods that return something should have the attribure Pure. It is not
  mandatory but it clearly states that the result should not be ignored.
  It might seem superfluous, but "Ã§a ne mange pas de pain".
- Add _nullable annotations_ wherever necessary.
- _Seal classes_ unless they are designed with extensibility in mind.
- Tag any use of the null-forgiving operator (!) with BONSANG!.

Editor config (does not affect the compilation).
- IDE0039 - csharp_style_pattern_local_over_anonymous_function
- IDE0060 - dotnet_code_quality_unused_parameters, (Remove unused parameter) covered by CA1801.
https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019
